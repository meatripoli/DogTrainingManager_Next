{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Segment, Grid, Image, List, Form, Header } from 'semantic-ui-react';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst programOptions = [{\n  key: 'o',\n  text: '',\n  value: 'other'\n}, {\n  key: 'b',\n  text: 'Boarding',\n  value: 'boarding'\n}, {\n  key: 'bt',\n  text: 'Board & Train',\n  value: 'board and train'\n}, {\n  key: 't',\n  text: 'Train',\n  value: 'train'\n}, {\n  key: 'g',\n  text: 'Going Home',\n  value: 'gohome'\n}];\nconst heelOptions = [{\n  key: 'l',\n  text: 'Left',\n  value: 'left'\n}, {\n  key: 'r',\n  text: 'Right',\n  value: 'right'\n}];\nexport default (props => {\n  const {\n    0: data,\n    1: setData\n  } = useState({});\n  useEffect(() => {\n    setData({\n      id: props.data.id,\n      heel: props.data.heel,\n      program: props.data.program,\n      dateofIntake: props.data.intakeDate\n    });\n  }, []);\n\n  const handleInput = event => {\n    let newObj = {\n      [event.target.name]: event.target.value\n    };\n    setData(_objectSpread({}, data, {}, newObj));\n  };\n\n  const handleDropdown = (event, item) => {\n    let newObj = {\n      [item.name]: item.value\n    };\n    setData(_objectSpread({}, data, {}, newObj));\n  };\n\n  const handleClick = async event => {\n    event.preventDefault();\n    console.log('submit following info', data); ///we want to update table\n\n    axios.put('/api/dogprofile/' + props.data.id, data).then(res => {\n      res.status === 200 ? alert(\"Intake Infosaved successfully\") : console.log(res);\n    }).catch(err => console.log('Error:', err));\n  };\n\n  return __jsx(Grid, {\n    divided: \"vertically\"\n  }, __jsx(Grid.Row, {\n    columns: 2\n  }, __jsx(Grid.Column, {\n    width: 6\n  }, __jsx(Image, {\n    src: \"https://www.pngkey.com/png/detail/204-2046914_diane-vulcan-shared-rhodesian-ridgeback.png\",\n    size: \"medium\",\n    circular: true\n  })), __jsx(Grid.Column, {\n    width: 10\n  }, __jsx(Header, {\n    as: \"h1\"\n  }, \"Basic Info\"), __jsx(List, {\n    bulleted: true\n  }, __jsx(List.Item, null, \"Name: \", props.data.dogName), __jsx(List.Item, null, \"Age: \", props.data.dogAge), __jsx(List.Item, null, \"Breed: \", props.data.dogBreed), __jsx(List.Item, null, \"Gender: \", props.data.dogGender), __jsx(List.Item, null, \"Owner Contact Information:\", __jsx(List.List, null, __jsx(List.Item, null, \"Name: \", `${props.data.ownerFirstName} ${props.data.ownerLastName}`), __jsx(List.Item, null, \"Phone: \", props.data.ownerCellPhone), __jsx(List.Item, null, \"Email: \", props.data.ownerEmail))), __jsx(List.Item, null, \"Food Information:\", __jsx(List.List, null, __jsx(List.Item, null, \"Name: \", props.data.foodName), __jsx(List.Item, null, \"Amount: \", props.data.foodAmount), __jsx(List.Item, null, \"Time: \", props.data.foodTime))), __jsx(List.Item, null, \"Fixed: \", props.data.fixed), __jsx(List.Item, null, \"Veterinarian Information:\", __jsx(List.List, null, __jsx(List.Item, null, \"Name: \", props.data.vetName), __jsx(List.Item, null, \"Phone: \", props.data.vetPhone))), __jsx(List.Item, null, \"Allergies: \", props.data.allegires), __jsx(List.Item, null, \"Medication: \", props.data.medication)))), __jsx(Grid.Row, {\n    stretched: true,\n    columns: 2\n  }, __jsx(Grid.Column, {\n    width: 8\n  }, __jsx(Segment, null, __jsx(Header, {\n    as: \"h3\"\n  }, \"Issues\"), __jsx(List, {\n    bulleted: true\n  }, props.data.issueDetails.map((issue, index) => {\n    issue ? __jsx(List.Item, null, issueHeader[i]) : '';\n  })))), __jsx(Grid.Column, {\n    width: 8\n  }, __jsx(Segment, null, __jsx(Header, {\n    as: \"h3\"\n  }, \"Extra Comments\"), __jsx(\"p\", null, \"Extra Issues: \", props.data.additionalIssues), __jsx(\"p\", null, \"Owner Notes: \", props.data.extraNotes === '' ? props.data.extraNotes : 'None Provided')), __jsx(Segment, null, __jsx(Header, {\n    as: \"h3\"\n  }, \"Known Commands\"), __jsx(\"p\", null, props.data.commands)))), __jsx(Grid.Row, {\n    stretched: true,\n    columns: 1\n  }, __jsx(Header, {\n    as: \"h1\",\n    style: {\n      marginLeft: '10px'\n    }\n  }, \"Intake Info (provided by trainer)\"), __jsx(Grid.Column, null, __jsx(Form, null, __jsx(Form.Group, {\n    widths: \"equal\"\n  }, __jsx(Form.Select, {\n    fluid: true,\n    label: \"Heel\",\n    options: heelOptions,\n    placeholder: \"Left\",\n    value: data.heel,\n    onChange: handleDropdown,\n    name: \"heel\"\n  }), __jsx(Form.Select, {\n    fluid: true,\n    label: \"Program\",\n    options: programOptions,\n    placeholder: \"Program\",\n    onChange: handleDropdown,\n    value: data.program,\n    name: \"program\"\n  }), __jsx(Form.Input, {\n    fluid: true,\n    label: \"Intake Date\",\n    name: \"dateofIntake\",\n    type: \"date\",\n    defaultValue: data.intakeDate,\n    onChange: handleInput\n  })), __jsx(Form.Button, {\n    positive: true,\n    onClick: handleClick\n  }, \"Save\")))), __jsx(Grid.Row, null));\n});","map":{"version":3,"sources":["/Users/meatripoli/ClassWork/FinalProject/components/Profile.js"],"names":["Segment","Grid","Image","List","Form","Header","useState","useEffect","axios","programOptions","key","text","value","heelOptions","props","data","setData","id","heel","program","dateofIntake","intakeDate","handleInput","event","newObj","target","name","handleDropdown","item","handleClick","preventDefault","console","log","put","then","res","status","alert","catch","err","dogName","dogAge","dogBreed","dogGender","ownerFirstName","ownerLastName","ownerCellPhone","ownerEmail","foodName","foodAmount","foodTime","fixed","vetName","vetPhone","allegires","medication","issueDetails","map","issue","index","issueHeader","i","additionalIssues","extraNotes","commands","marginLeft"],"mappings":"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","sourcesContent":["import { Segment,Grid,Image,List,Form,Header } from 'semantic-ui-react';\nimport {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst programOptions = [\n    { key: 'o', text: '', value: 'other' },\n    { key: 'b', text: 'Boarding', value: 'boarding' },\n    { key: 'bt', text: 'Board & Train', value: 'board and train' },    \n    { key: 't', text: 'Train', value: 'train' },\n    { key: 'g', text: 'Going Home', value: 'gohome' },\n];\nconst heelOptions = [\n    { key: 'l', text: 'Left', value: 'left' },\n    { key: 'r', text: 'Right', value: 'right' },\n];\nexport default (props) => {\n    const [data,setData]=useState({})\n    useEffect(()=>{\n        setData({\n            id: props.data.id,\n            heel: props.data.heel,\n            program: props.data.program,\n            dateofIntake: props.data.intakeDate,\n        })\n    },[])\n    const handleInput = (event)=>{\n        let newObj = {[event.target.name]:event.target.value};\n        setData({...data,...newObj});\n   }\n    const handleDropdown = (event,item)=>{\n        let newObj = {[item.name]: item.value};\n        setData({...data,...newObj});\n    }\n    const handleClick = async (event)=>{\n        event.preventDefault();\n        console.log('submit following info',data);\n        ///we want to update table\n        axios.put('/api/dogprofile/'+props.data.id, data)\n        .then(res => {    \n            res.status===200?alert(\"Intake Infosaved successfully\"):console.log(res);\n        })\n        .catch(err => console.log('Error:',err))\n    }\n    return (<Grid divided='vertically'>\n            <Grid.Row columns={2}>\n                <Grid.Column width={6}>\n                    <Image src='https://www.pngkey.com/png/detail/204-2046914_diane-vulcan-shared-rhodesian-ridgeback.png' size='medium' circular />\n                </Grid.Column>\n                <Grid.Column width={10}>\n                    <Header as='h1'>Basic Info</Header>\n                    <List bulleted>\n                        <List.Item>Name: {props.data.dogName}</List.Item>\n                        <List.Item>Age: {props.data.dogAge}</List.Item>\n                        <List.Item>Breed: {props.data.dogBreed}</List.Item>\n                        <List.Item>Gender: {props.data.dogGender}</List.Item>\n                        <List.Item >\n                            Owner Contact Information:\n                            <List.List>\n                                <List.Item>Name: {`${props.data.ownerFirstName} ${props.data.ownerLastName}`}</List.Item>\n                                <List.Item>Phone: {props.data.ownerCellPhone}</List.Item>\n                                <List.Item>Email: {props.data.ownerEmail}</List.Item>\n                            </List.List>\n                        </List.Item>\n                        <List.Item>\n                            Food Information:\n                            <List.List>\n                                <List.Item>Name: {props.data.foodName}</List.Item>\n                                <List.Item>Amount: {props.data.foodAmount}</List.Item>\n                                <List.Item>Time: {props.data.foodTime}</List.Item>\n                            </List.List>\n                        </List.Item>\n                        <List.Item>Fixed: {props.data.fixed}</List.Item>\n                        <List.Item>\n                            Veterinarian Information:\n                            <List.List>\n                                <List.Item>Name: {props.data.vetName}</List.Item>\n                                <List.Item>Phone: {props.data.vetPhone}</List.Item>\n                            </List.List>\n                        </List.Item>\n                        <List.Item>Allergies: {props.data.allegires}</List.Item>\n                        <List.Item>Medication: {props.data.medication}</List.Item>\n                    </List>\n                </Grid.Column>\n            </Grid.Row> \n            <Grid.Row stretched columns={2}>\n                <Grid.Column width={8}>\n                    <Segment>\n                        <Header as='h3' >Issues</Header>\n                        <List bulleted> \n                            {props.data.issueDetails.map((issue,index)=>{\n                                issue?<List.Item>{issueHeader[i]}</List.Item>:''\n                            })}\n                        </List>\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={8}>\n                    <Segment>                        \n                        <Header as='h3' >Extra Comments</Header>\n                        <p>Extra Issues: {props.data.additionalIssues}</p>\n                        <p>Owner Notes: {props.data.extraNotes===''?props.data.extraNotes:'None Provided'}</p>\n                    </Segment>\n                    <Segment>\n                        <Header as='h3' >Known Commands</Header>\n                        <p>{props.data.commands}</p>\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n            \n            <Grid.Row stretched columns={1}>\n                <Header as='h1' style={{marginLeft:'10px'}}>Intake Info (provided by trainer)</Header>\n                <Grid.Column>\n                    <Form>\n                        <Form.Group widths='equal'>\n                            <Form.Select\n                                fluid\n                                label = 'Heel'\n                                options={heelOptions}\n                                placeholder = 'Left'\n                                value = {data.heel}\n                                onChange = {handleDropdown}\n                                name= 'heel'\n                            />\n                            <Form.Select\n                                fluid\n                                label = 'Program'\n                                options={programOptions}\n                                placeholder = 'Program'\n                                onChange = {handleDropdown}\n                                value = {data.program}\n                                name= 'program'\n                            />\n                            <Form.Input \n                                fluid \n                                label='Intake Date' \n                                name='dateofIntake' \n                                type='date' \n                                defaultValue = {data.intakeDate}\n                                onChange = {handleInput}\n                            />\n                        </Form.Group>\n                        <Form.Button positive onClick={handleClick}>Save</Form.Button>\n                    </Form>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row></Grid.Row>\n        </Grid>\n    );\n};"]},"metadata":{},"sourceType":"module"}